{
  "openapi": "3.0.0",
  "info": {
    "title": "Scribble Healthcare API",
    "version": "1.0",
    "description": "Scribble is a comprehensive healthcare API that provides functionality for managing patient visits, assessments, clinician workflows, and administrative tasks in healthcare settings. This API supports both clinical and administrative operations.",
    "contact": {
      "name": "Scribble API Support",
      "email": "support@scribble.com"
    }
  },
  "servers": [],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication and authorization endpoints for user management, including login, tenant management, and role-based access control"
    },
    {
      "name": "Visit",
      "description": "Endpoints for managing patient visits, episodes of care, assessments, and clinical documentation"
    },
    {
      "name": "Settings",
      "description": "Configuration endpoints for customizing application behavior, user preferences, and display settings"
    },
    {
      "name": "User",
      "description": "User management endpoints for handling clinician and client profiles, notifications, and user-specific data"
    },
    {
      "name": "Dashboard",
      "description": "Analytics and reporting endpoints providing insights into clinical operations and patient care metrics"
    }
  ],
  "paths": {
    "/v1/auth/login": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Authenticates users through multiple methods including email/password and VIN-based federation. Supports both standard user authentication and Single Sign-On (SSO) workflows. Returns a JWT token for subsequent API calls.",
        "operationId": "post_auth_login",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/auth/tenant": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Creates a new tenant in the system. Tenants represent separate healthcare organizations or facilities with their own set of users, patients, and configurations. Requires administrative privileges.",
        "operationId": "post_auth_tenant_create",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "tenantName": {
                        "type": "string"
                      }
                    },
                    "required": ["tenantName"]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantListResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Retrieves a list of all tenants accessible to the authenticated user. Supports pagination and filtering options for large-scale deployments.",
        "operationId": "get_auth_tenant_list",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/roles": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_auth_roles_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "name": "x-tenant-id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "x-tenant-id": {
                  "type": "string",
                  "example": "67a89fad069cd3c52f8cff22"
                }
              },
              "required": ["x-tenant-id"]
            }
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/user": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform user registration. If the client passes a redirect URL and the SSO requires verification, the response of the verification call will be redirected to that URL.(Currently used in developer registeration)",
        "operationId": "POST_v1-auth-user",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "thillaimaharajan.g@gmail.com"
                  },
                  "employeeId": {
                    "type": "string",
                    "example": "VS2891"
                  },
                  "primaryPhone": {
                    "type": "string",
                    "example": "567-890-1234"
                  },
                  "x-tenant-id": {
                    "type": "string",
                    "example": "67c03a5a14563c13b59a7846"
                  },
                  "roleId": {
                    "type": "string",
                    "example": "67c03a5914563c13b59a7829"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "David"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Miller"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["Active", "Inactive"],
                    "example": "Active"
                  },
                  "discipline": {
                    "type": "string",
                    "example": "Physical Therapy"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "Therapist"
                  },
                  "age": {
                    "type": "string",
                    "example": "50"
                  },
                  "dob": {
                    "type": "string",
                    "format": "date",
                    "example": "1974-07-08"
                  },
                  "gender": {
                    "type": "string",
                    "enum": ["Male", "Female", "Other"],
                    "example": "Male"
                  },
                  "address1": {
                    "type": "string",
                    "example": "654 Pine St"
                  },
                  "address2": {
                    "type": "string",
                    "example": ""
                  },
                  "city": {
                    "type": "string",
                    "example": "San Diego"
                  },
                  "state": {
                    "type": "string",
                    "example": "CA"
                  },
                  "zip": {
                    "type": "string",
                    "example": "92101"
                  },
                  "country": {
                    "type": "string",
                    "example": "USA"
                  }
                },
                "required": [
                  "email",
                  "employeeId",
                  "x-tenant-id",
                  "roleId",
                  "firstName",
                  "lastName",
                  "status",
                  "primaryPhone"
                ]
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/change-password": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "description": "Change new password",
        "operationId": "put_auth_change_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "oldPassword": {
                    "type": "string"
                  }
                },
                "required": ["newPassword", "oldPassword"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": []
    },
    "/v1/auth/recover-password-email": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseRecoverPassword"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Request to resend recover password email",
        "operationId": "post_auth_recover_password_email",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": ["email"],
                "type": "object"
              }
            }
          },
          "required": true
        }
      },
      "parameters": []
    },
    "/v1/auth/recover-password": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "tags": ["Auth"],
        "description": "Request to recover password email. This request should contain the authorization token in the header. User will get the auth token as a result of /recover-password-email api",
        "operationId": "post_auth_recover_password",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                },
                "required": ["email", "newPassword"],
                "type": "object"
              }
            }
          },
          "required": true
        }
      },
      "parameters": []
    },
    "/v1/auth/logout": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Clear the data from client and server side.",
        "operationId": "post_auth_logout",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": ["refreshToken"],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Get new accesstoken by using refreshtoken",
        "operationId": "post_auth_refresh_token",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": ["refreshToken"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/user/client": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_user_client_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/user/clinician": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClinicianResponse"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_user_clinician_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/user/clinician/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClinicianResponse"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "description": "Update a clinician",
        "operationId": "put_user_clinician_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/user/clinician/visitDetails": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitDetailResponse"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "description": "Get the visit details of the clinician",
        "operationId": "get_user_clinician_visit_details",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "visitDate",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "02/15/2025"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/user/notification": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "description": "Get the notifications of the user",
        "operationId": "get_user_notifications",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/form": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResponse"
                },
                "example": {
                  "status": "ok",
                  "data": [
                    {
                      "_id": "67cf182ecd6dbb2d123519e8",
                      "formTypeId": 1,
                      "createdAt": "2025-03-10T16:49:50.961Z",
                      "updatedAt": "2025-03-14T12:16:04.920Z",
                      "__v": 0,
                      "assessmentForm": [
                        {
                          "question_code": "A1110.A",
                          "question": "What is your preferred language?",
                          "question_type": "TEXT_INPUT",
                          "options": [
                            "0. English",
                            "1. Spanish",
                            "9. Unable to determine"
                          ],
                          "section": "Administrative"
                        }
                      ],
                      "formName": "Start of Care"
                    }
                  ],
                  "total_records_available": 1
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Retrieves assessment forms and templates used for clinical documentation. Forms can include various types of clinical assessments, questionnaires, and documentation templates.",
        "operationId": "get_visit_form_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormPostResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "formName": "ROC",
                    "assessmentForm": [
                      {
                        "question_code": "M1610",
                        "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                        "options": [
                          "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                          "1. Patient is incontinent",
                          "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Bladder and Bowel"
                      },
                      {
                        "question_code": "M1028",
                        "question": "Do you have any other active health conditions that we should be aware of?",
                        "options": [
                          "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                          "2. Diabetes Mellitus (DM)",
                          "3. None of the above"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Medications"
                      }
                    ],
                    "_id": "67db119962a34a167b810ade",
                    "createdAt": "2025-03-19T18:48:57.085Z",
                    "updatedAt": "2025-03-19T18:48:57.086Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Creates new assessment forms or documentation templates. Supports multiple question types including text input, checklists, radio buttons, and dropdowns. Forms can be organized by sections for better usability.",
        "operationId": "post_visit_form_create",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormPostRequest"
              },
              "example": {
                "formName": "ROC",
                "assessmentForm": [
                  {
                    "question_code": "M1610",
                    "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                    "options": [
                      "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                      "1. Patient is incontinent",
                      "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                    ],
                    "question_type": "TEXT_INPUT",
                    "section": "Bladder and Bowel"
                  },
                  {
                    "question_code": "M1028",
                    "question": "Do you have any other active health conditions that we should be aware of?",
                    "options": [
                      "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                      "2. Diabetes Mellitus (DM)",
                      "3. None of the above"
                    ],
                    "question_type": "TEXT_INPUT",
                    "section": "Medications"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/form/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormPutResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "formName": "ROC",
                    "assessmentForm": [
                      {
                        "question_code": "M1610",
                        "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                        "options": [
                          "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                          "1. Patient is incontinent",
                          "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Bladder and Bowel"
                      },
                      {
                        "question_code": "M1028",
                        "question": "Do you have any other active health conditions that we should be aware of?",
                        "options": [
                          "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                          "2. Diabetes Mellitus (DM)",
                          "3. None of the above"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Medications"
                      }
                    ],
                    "_id": "67db119962a34a167b810ade",
                    "createdAt": "2025-03-19T18:48:57.085Z",
                    "updatedAt": "2025-03-19T18:48:57.086Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Get the form of the visit",
        "operationId": "get_visit_form_by_id",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormPutResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "formName": "ROC",
                    "assessmentForm": [
                      {
                        "question_code": "M1610",
                        "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                        "options": [
                          "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                          "1. Patient is incontinent",
                          "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Bladder and Bowel"
                      },
                      {
                        "question_code": "M1028",
                        "question": "Do you have any other active health conditions that we should be aware of?",
                        "options": [
                          "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                          "2. Diabetes Mellitus (DM)",
                          "3. None of the above"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Medications"
                      }
                    ],
                    "_id": "67db119962a34a167b810ade",
                    "createdAt": "2025-03-19T18:48:57.085Z",
                    "updatedAt": "2025-03-19T18:48:57.086Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Update the form of the visit",
        "operationId": "put_visit_form_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Form"
              },
              "example": {
                "assessmentForm": [
                  {
                    "question_code": "A1110.A",
                    "question": "What is your preferred language?",
                    "question_type": "TEXT_INPUT",
                    "options": [
                      "0. English",
                      "1. Spanish",
                      "9. Unable to determine"
                    ],
                    "section": "Administrative"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormPutResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "formName": "ROC",
                    "assessmentForm": [
                      {
                        "question_code": "M1610",
                        "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                        "options": [
                          "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                          "1. Patient is incontinent",
                          "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Bladder and Bowel"
                      },
                      {
                        "question_code": "M1028",
                        "question": "Do you have any other active health conditions that we should be aware of?",
                        "options": [
                          "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                          "2. Diabetes Mellitus (DM)",
                          "3. None of the above"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Medications"
                      }
                    ],
                    "_id": "67db119962a34a167b810ade",
                    "createdAt": "2025-03-19T18:48:57.085Z",
                    "updatedAt": "2025-03-19T18:48:57.086Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Delete the form of the visit",
        "operationId": "delete_visit_form_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],

        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/template": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResponse"
                },
                "example": {
                  "status": "ok",
                  "data": [
                    {
                      "_id": "67cf182ecd6dbb2d123519e8",
                      "formTypeId": 1,
                      "createdAt": "2025-03-10T16:49:50.961Z",
                      "updatedAt": "2025-03-14T12:16:04.920Z",
                      "__v": 0,
                      "assessmentForm": [
                        {
                          "question_code": "A1110.A",
                          "question": "What is your preferred language?",
                          "question_type": "TEXT_INPUT",
                          "options": [
                            "0. English",
                            "1. Spanish",
                            "9. Unable to determine"
                          ],
                          "section": "Administrative"
                        }
                      ],
                      "formName": "Start of Care"
                    }
                  ],
                  "total_records_available": 1
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Get the form of the visit",
        "operationId": "get_visit_template_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/template/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormPutResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "formName": "ROC",
                    "assessmentForm": [
                      {
                        "question_code": "M1610",
                        "question": "Have you been experiencing any issues with urinary leakage or incontinence? Do you currently use a urinary catheter?",
                        "options": [
                          "0. No incontinence or catheter (includes anuria or ostomy for urinary drainage)",
                          "1. Patient is incontinent",
                          "2. Patient requires a urinary catheter (specifically: external, indwelling, intermittent, or suprapubic)"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Bladder and Bowel"
                      },
                      {
                        "question_code": "M1028",
                        "question": "Do you have any other active health conditions that we should be aware of?",
                        "options": [
                          "1. Peripheral Vascular Disease (PVD) or Peripheral Arterial Disease (PAD)",
                          "2. Diabetes Mellitus (DM)",
                          "3. None of the above"
                        ],
                        "question_type": "TEXT_INPUT",
                        "section": "Medications"
                      }
                    ],
                    "_id": "67db119962a34a167b810ade",
                    "createdAt": "2025-03-19T18:48:57.085Z",
                    "updatedAt": "2025-03-19T18:48:57.086Z",
                    "__v": 0
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Get the form template of the visit",
        "operationId": "get_visit_template_by_id",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Retrieves visit records with comprehensive details including patient information, clinician assignments, visit types, and scheduling information. Supports pagination and advanced filtering.",
        "operationId": "get_visit_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitResponse"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Creates new visit records. Captures essential visit details including patient information, assigned clinician, visit type, service codes, and scheduling information.",
        "operationId": "post_visit_create",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Visit"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "put_visit_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/assessment": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Retrieves completed or in-progress patient assessments. Supports filtering by visit ID and includes detailed clinical documentation and responses.",
        "operationId": "get_visit_assessment_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "object",
              "properties": {
                "visitId": {
                  "type": "string",
                  "example": "67c669e52f53af0f16bf90f4"
                }
              },
              "required": ["visitId"]
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/assessment/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                },
                "example": {
                  "status": "ok",
                  "data": {
                    "_id": "67cf182ecd6dbb2d123519e8",
                    "formTypeId": 1,
                    "createdAt": "2025-03-10T16:49:50.961Z",
                    "updatedAt": "2025-03-19T18:34:21.310Z",
                    "__v": 0,
                    "assessmentForm": [
                      {
                        "question_code": "A1110.A",
                        "question": "What is your preferred language?",
                        "question_type": "TEXT_INPUT",
                        "options": [
                          "0. English",
                          "1. Spanish",
                          "9. Unable to determine"
                        ],
                        "section": "Administrative"
                      }
                    ],
                    "formName": "Start of Care"
                  }
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for all other requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_visit_assessment_by_id",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentUpdateRequest"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for all other requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "put_visit_assessment_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/visit/episode": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitListResponse"
                }
              }
            }
          }
        },
        "tags": ["Visit"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_visit_episode_list",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/setting/gridView": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "tags": ["Settings"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "put_setting_grid_view_update",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gridName": {
                    "type": "string"
                  },
                  "viewJson": {
                    "type": "object",
                    "properties": {
                      "clinicianId": {
                        "$ref": "#/components/schemas/LogoutResponse"
                      },
                      "clinicianNo": {
                        "$ref": "#/components/schemas/LogoutResponse"
                      },
                      "firstName": {
                        "$ref": "#/components/schemas/LogoutResponse"
                      },
                      "lastName": {
                        "$ref": "#/components/schemas/LogoutResponse"
                      },
                      "status": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "discipline": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "jobTitle": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "email": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "age": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "dob": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "gender": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "address1": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "address2": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "city": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "state": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "zip": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "country": {
                        "$ref": "#/components/schemas/FieldSchema"
                      },
                      "primaryPhone": {
                        "$ref": "#/components/schemas/FieldSchema"
                      }
                    }
                  }
                },
                "required": ["gridName", "viewJson"]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "tags": ["Settings"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_setting_grid_view",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "gridName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["clinicianTable", "clientTable", "visitTable"],
              "example": "clinicianTable"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },

    "/v1/dashboard/admin": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "tags": ["Dashboard"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "get_dashboard_admin_metrics",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/clinician/upload-audio": {
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "audio": {
                    "type": "string",
                    "format": "binary",
                    "description": "Audio file to upload"
                  },
                  "assessmentId": {
                    "type": "string",
                    "example": "67a95e6208705766eb2a4619",
                    "description": "ID of the assessment"
                  }
                },
                "required": ["audio", "assessmentId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio file uploaded successfully and message sent to SQS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAudioResponse"
                }
              }
            }
          }
        },
        "tags": ["Clinician"],
        "description": "Handles audio file uploads for clinical documentation. Supports voice recordings that can be processed for transcription and documentation purposes. Integrates with AWS S3 for storage and SQS for processing.",
        "operationId": "post_clinician_upload_audio",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67cf182ecd6dbb2d123519ea"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],

        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Filter": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "thillai"
          },
          "lastName": {
            "type": "string",
            "example": "sathish"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "string",
            "example": "Needs to be developed"
          }
        }
      },
      "ChangePasswordResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Password updated."
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "example": "sandeepb@acutedge.com"
              },
              "userId": {
                "type": "string",
                "example": "67a95e6208705766eb2a4619"
              },
              "roles": {
                "type": "string",
                "example": "scribble_admin"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["sso.write"]
              },
              "accessToken": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2IjoyLCJ..."
              },
              "refreshToken": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoic..."
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-10T02:03:14.080Z"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-10T02:03:14.080Z"
              }
            }
          }
        }
      },
      "VisitListResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "visitNo": { "type": "string" },
                "visitDate": { "type": "string", "format": "date" },
                "week": { "type": "string" },
                "visitType": { "type": "string" },
                "service": { "type": "string" },
                "serviceCode": { "type": "string" },
                "createdAt": { "type": "string", "format": "date-time" },
                "updatedAt": { "type": "string", "format": "date-time" },
                "episodeId": { "type": "string" },
                "episodeNo": { "type": "string" },
                "clientId": { "type": "string" },
                "clientFirstName": { "type": "string" },
                "clientLastName": { "type": "string" },
                "clinicianId": { "type": "string" },
                "clinicianEmail": { "type": "string", "format": "email" },
                "clinicianFirstName": { "type": "string" },
                "clinicianLastName": { "type": "string" }
              },
              "required": [
                "_id",
                "visitNo",
                "visitDate",
                "week",
                "visitType",
                "service",
                "serviceCode",
                "createdAt",
                "updatedAt",
                "episodeId",
                "episodeNo",
                "clientId",
                "clientFirstName",
                "clientLastName",
                "clinicianId",
                "clinicianEmail",
                "clinicianFirstName",
                "clinicianLastName"
              ]
            }
          },
          "total_records_available": { "type": "integer" }
        },
        "required": ["status", "data", "total_records_available"]
      },
      "ClinicianResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "userId": { "type": "string" },
                "clinicianNo": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "primaryPhone": { "type": "string" },
                "createdAt": { "type": "string", "format": "date-time" },
                "updatedAt": { "type": "string", "format": "date-time" },
                "__v": { "type": "integer" },
                "address1": { "type": "string" },
                "city": { "type": "string" },
                "discipline": { "type": "string" },
                "dob": { "type": "string", "format": "date" },
                "state": { "type": "string", "minLength": 2, "maxLength": 2 },
                "status": { "type": "string" },
                "zip": { "type": "string", "pattern": "^[0-9]{5}$" }
              },
              "required": [
                "_id",
                "userId",
                "clinicianNo",
                "firstName",
                "lastName",
                "primaryPhone",
                "createdAt",
                "updatedAt",
                "__v",
                "address1",
                "city",
                "discipline",
                "dob",
                "state",
                "status",
                "zip"
              ]
            }
          },
          "total_records_available": { "type": "integer" }
        },
        "required": ["status", "data", "total_records_available"]
      },
      "ClientResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "clientNo": { "type": "string" },
                "clientGroupId": { "type": "string" },
                "firstName": { "type": "string" },
                "lastName": { "type": "string" },
                "age": { "type": "string", "pattern": "^[0-9]+ years$" },
                "dob": { "type": "string", "format": "date" },
                "address1": { "type": "string" },
                "address2": { "type": "string" },
                "city": { "type": "string" },
                "state": { "type": "string", "minLength": 2, "maxLength": 2 },
                "primaryPhone": {
                  "type": "string",
                  "pattern": "^\\(\\d{3}\\) \\d{3}-\\d{4}$"
                },
                "createdAt": { "type": "string", "format": "date-time" },
                "updatedAt": { "type": "string", "format": "date-time" },
                "__v": { "type": "integer" }
              },
              "required": [
                "_id",
                "clientNo",
                "clientGroupId",
                "firstName",
                "lastName",
                "age",
                "dob",
                "address1",
                "city",
                "state",
                "primaryPhone",
                "createdAt",
                "updatedAt",
                "__v"
              ]
            }
          },
          "total_records_available": { "type": "integer" }
        },
        "required": ["status", "data", "total_records_available"]
      },
      "VisitDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "overallCounts": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "nullable": true,
                    "example": null
                  },
                  "totalVisits": {
                    "type": "integer",
                    "example": 5
                  },
                  "newVisits": {
                    "type": "integer",
                    "example": 2
                  },
                  "inProgressVisits": {
                    "type": "integer",
                    "example": 1
                  },
                  "completedVisits": {
                    "type": "integer",
                    "example": 2
                  }
                }
              },
              "todayVisits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "totalVisits": {
                      "type": "integer",
                      "example": 4
                    },
                    "newVisits": {
                      "type": "integer",
                      "example": 2
                    },
                    "inProgressVisits": {
                      "type": "integer",
                      "example": 1
                    },
                    "completedVisits": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FormGetResponse": {},

      "FormPutResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "formTypeId": {
                "type": "integer"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "__v": {
                "type": "integer"
              },
              "assessmentForm": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "question_code": {
                      "type": "string"
                    },
                    "question": {
                      "type": "string"
                    },
                    "question_type": {
                      "type": "string",
                      "enum": ["TEXT_INPUT", "CHECK_LIST", "RADIO", "DROPDOWN"]
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "section": {
                      "type": "string"
                    }
                  }
                }
              },
              "formName": {
                "type": "string"
              }
            }
          }
        }
      },

      "TenantResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "tenantName": {
                "type": "string",
                "example": "amedysis1"
              },
              "databaseName": {
                "type": "string",
                "example": "amedysis1"
              },
              "createdBy": {
                "type": "string",
                "format": "ObjectId",
                "example": "67a89f512d0f29cb9a87c940"
              },
              "_id": {
                "type": "string",
                "format": "ObjectId",
                "example": "67a89fad069cd3c52f8cff1f"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:29:33.215Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:29:33.215Z"
              },
              "__v": {
                "type": "integer",
                "example": 0
              }
            }
          }
        }
      },
      "TenantListResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67b4a43ef61eb03853b863fb"
          },
          "tenantName": {
            "type": "string",
            "example": "kantime"
          },
          "databaseName": {
            "type": "string",
            "example": "kantime"
          },
          "createdBy": {
            "type": "string",
            "example": "67b4a3fdf61eb03853b863f5"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T15:16:14.100Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T15:16:14.100Z"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "VisitUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "New",
              "Missed",
              "In Progress",
              "Past Due",
              "Submitted",
              "Completed"
            ],
            "example": "In Progress"
          }
        }
      },
      "AssessmentUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Not Started",
              "In Progress",
              "Submitted to AI",
              "Validation",
              "Submitted to EMR",
              "Completed"
            ],
            "example": "In Progress"
          }
        }
      },
      "LoginRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "sandeepb@acutedge.com"
              },
              "password": {
                "type": "string",
                "example": "Admin@123"
              }
            },
            "required": ["username", "password"]
          }
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "FieldSchema": {
        "type": "object",
        "properties": {
          "isRequired": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "questionType": {
            "type": "string",
            "enum": ["TEXT_INPUT"]
          },
          "options": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": ["name", "value"]
          }
        },
        "required": [
          "isRequired",
          "isVisible",
          "label",
          "questionType",
          "options"
        ]
      },

      "AssessmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assessment"
            }
          },
          "total_records_available": {
            "type": "integer"
          }
        }
      },
      "Assessment": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "formTypeId": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "__v": {
            "type": "integer"
          },
          "assessmentForm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssessmentForm"
            }
          },
          "formName": {
            "type": "string"
          }
        }
      },
      "AssessmentForm": {
        "type": "object",
        "properties": {
          "question_code": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "question_type": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "section": {
            "type": "string"
          }
        }
      },

      "FormPostResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "formName": {
                "type": "string"
              },
              "assessmentForm": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssessmentForm"
                }
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "__v": {
                "type": "integer"
              }
            }
          }
        }
      },
      "FormPostRequest": {
        "type": "object",
        "properties": {
          "formName": {
            "type": "string"
          },
          "assessmentForm": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "question_code": {
                  "type": "string"
                },
                "question": {
                  "type": "string"
                },
                "question_type": {
                  "type": "string",
                  "enum": ["TEXT_INPUT", "CHECK_LIST", "RADIO", "DROPDOWN"]
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "section": {
                  "type": "string"
                }
              }
            }
          }
        }
      },

      "UserResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "roleId": {
                "type": "string",
                "example": "67a89fad069cd3c52f8cff22"
              },
              "tenantId": {
                "type": "string",
                "example": "67a89fad069cd3c52f8cff1f"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "thillaimaharajan.g@gmail.com"
              },
              "password": {
                "type": "string",
                "example": "$2b$10$8/mIZz4SPDAcPkRvrbopUOtZu87JS2dFhnByr4iW5f6fO9EszyV6e"
              },
              "isVerified": {
                "type": "string",
                "example": "false"
              },
              "isDeleted": {
                "type": "string",
                "example": "false"
              },
              "loginAttempts": {
                "type": "integer",
                "example": 0
              },
              "_id": {
                "type": "string",
                "example": "67a8a17fda90d3413efda928"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:37:19.762Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:37:19.763Z"
              },
              "__v": {
                "type": "integer",
                "example": 0
              }
            }
          }
        }
      },
      "RolesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67b4b17c9805bd2c1aedbc9e"
          },
          "roleName": {
            "type": "string",
            "example": "user"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "assessment.read",
              "assessment.write",
              "assessment.remove"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T16:12:44.330Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T16:12:44.331Z"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "VisitResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "episodeId": {
                "type": "string",
                "format": "uuid",
                "example": "67bd8382c5ae4cbd95965ee1"
              },
              "clinicianId": {
                "type": "string",
                "format": "uuid",
                "example": "67bd80867756b55693740021"
              },
              "clientId": {
                "type": "string",
                "format": "uuid",
                "example": "67bd8383c5ae4cbd95965ee5"
              },
              "visitNo": {
                "type": "string",
                "example": "4192052"
              },
              "visitDate": {
                "type": "string",
                "format": "date",
                "example": "02/13/2025"
              },
              "week": {
                "type": "string",
                "example": "02/09/2025 - 02/15/2025"
              },
              "visitType": {
                "type": "string",
                "example": "Normal"
              },
              "service": {
                "type": "string",
                "example": "PT SOC OASIS"
              },
              "serviceCode": {
                "type": "string",
                "example": "PT SOC"
              },
              "_id": {
                "type": "string",
                "format": "uuid",
                "example": "67bd8386c5ae4cbd95965ee7"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-25T08:47:02.177Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-25T08:47:02.177Z"
              },
              "__v": {
                "type": "integer",
                "example": 0
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "errorCode": {
            "enum": [
              "GENERAL",
              "NOT_FOUND",
              "MISSING_DATA",
              "INVALID_DATA",
              "EXPIRED_TOKEN",
              "INVALID_TOKEN",
              "INVALID_CODE",
              "VERIFIED_ACCOUNT",
              "FEDERATED_ACCOUNT"
            ],
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["status", "errorMessage", "data"]
      },
      "ErrorResponseRecoverPassword": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "errorCode": {
            "enum": [
              "GENERAL",
              "NOT_FOUND",
              "MISSING_DATA",
              "INVALID_DATA",
              "EXPIRED_TOKEN",
              "INVALID_TOKEN",
              "INVALID_CODE",
              "VERIFIED_ACCOUNT",
              "FEDERATED_ACCOUNT",
              "FIVE_MINUTES_DELAY_ERROR"
            ],
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "errorCode": {
                "type": "string"
              }
            }
          }
        },
        "required": ["status", "errorMessage", "data"]
      },
      "Visit": {
        "type": "object",
        "properties": {
          "Care Type": { "type": "string", "example": "Intermitent" },
          "Classification": {
            "type": "string",
            "example": "Home Safety Check,Skin Check"
          },
          "Client First Name": { "type": "string", "example": "Connie" },
          "Client Last Name": { "type": "string", "example": "Wimpee" },
          "Client Address 1": {
            "type": "string",
            "example": "6331 W Cholla St"
          },
          "Client Address 2": { "type": "string", "nullable": true },
          "Client Age": { "type": "string", "example": "72 years" },
          "Client Cell": { "type": "string", "nullable": true },
          "Client City": { "type": "string", "example": "Glendale" },
          "Client County": { "type": "string", "example": "Maricopa" },
          "Client DOB": { "type": "string", "example": "10/10/1952" },
          "Client Email": { "type": "string", "nullable": true },
          "Client Emergency Contact": {
            "type": "string",
            "example": "Wimpee, William"
          },
          "Client Emergency Contact #": {
            "type": "string",
            "example": "(623) 235-6301"
          },
          "Client ID": { "type": "integer", "example": 71251 },
          "Client Group ID": { "type": "integer", "example": 71251 },
          "Client LOB": { "type": "string", "example": "Adult Skilled" },
          "Client Notes": { "type": "string", "nullable": true },
          "Client Phone": { "type": "string", "example": "(623) 235-6301" },
          "Client Signed": { "type": "string", "example": "No" },
          "Client Signed Date": { "type": "string", "nullable": true },
          "Client State": { "type": "string", "example": "AZ" },
          "Clinician First Name": { "type": "string", "example": "Amber" },
          "Clinician Last Name": { "type": "string", "example": "Miller" },
          "Clinician Address 1": {
            "type": "string",
            "example": "409 E. Colter Street"
          },
          "Clinician Cell": { "type": "string", "example": "(602) 363-6358" },
          "Clinician City": { "type": "string", "example": "Phoenix" },
          "Clinician Confirmed": { "type": "string", "example": "No" },
          "Clinician Date of Birth": {
            "type": "string",
            "example": "11/11/1976"
          },
          "Clinician Discipline": { "type": "string", "example": "PT" },
          "Clinician Email": {
            "type": "string",
            "example": "ambermmillerpt@gmail.com"
          },
          "Clinician Gender": { "type": "string", "example": "Female" },
          "Clinician ID": { "type": "integer", "example": 1027 },
          "Clinician SSN": { "type": "string", "example": "474-30-2711" },
          "Clinician State": { "type": "string", "example": "AZ" },
          "Clinician Status": { "type": "string", "example": "Active" },
          "Clinician Zip": { "type": "integer", "example": 85012 },
          "eChart Status": { "type": "string", "example": "Open" },
          "Episode Duration": { "type": "integer", "example": 60 },
          "Episode Number": { "type": "integer", "example": 1 },
          "Episode Start Date": { "type": "string", "example": "02/13/2025" },
          "Episode End Date": { "type": "string", "example": "04/13/2025" },
          "EVV Visit": { "type": "string", "example": "No" },
          "Intake Status": { "type": "string", "example": "Ready to Schedule" },
          "Month": { "type": "string", "example": "2025 - February" },
          "Non-Billable Hours": { "type": "number", "example": 0.0 },
          "Referral Date": { "type": "string", "example": "02/11/2025" },
          "Schedule Status": { "type": "string", "example": "Planned" },
          "Service": { "type": "string", "example": "PT SOC OASIS" },
          "Service Code": { "type": "string", "example": "PT SOC" },
          "SOC Date": { "type": "string", "example": "02/13/2025" },
          "Visit Date": { "type": "string", "example": "02/13/2025" },
          "Visit ID": { "type": "integer", "example": 4192052 },
          "Visit Type": { "type": "string", "example": "Normal" },
          "Week": { "type": "string", "example": "02/09/2025 - 02/15/2025" },
          "Weekday": { "type": "string", "example": "Thursday" }
        }
      },
      "SuccessResponseRecoverPassword": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "errorCode": {
                "type": "string"
              }
            }
          }
        },
        "required": ["status", "data"]
      },
      "UploadAudioResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "string",
            "example": "Audio file uploaded and message sent to SQS"
          }
        }
      },

      "Form": {
        "type": "object",
        "properties": {
          "assessmentForm": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "question_code": {
                  "type": "string"
                },
                "question": {
                  "type": "string"
                },
                "question_type": {
                  "type": "string",
                  "enum": ["TEXT_INPUT", "CHECK_LIST", "RADIO", "DROPDOWN"]
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "section": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "links": {},
    "callbacks": {}
  }
}
