{
  "openapi": "3.0.0",
  "info": {
    "title": "Scribble API spec",
    "version": "1.0"
  },
  "servers": [],
  "tags": [
    {
      "name": "Auth",
      "description": "Used by user to create user & login to system"
    },
    {
      "name": "Assessment",
      "description": "Used by user to create user & login to system"
    },
    {
      "name": "Settings",
      "description": "Used by user to create user & login to system"
    }
  ],
  "paths": {
    "/v1/auth/login": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "POST_v1-auth-login",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/auth/tenant": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "POST_v1-auth-tenant",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "tenantName": {
                        "type": "string"
                      }
                    },
                    "required": ["tenantName"]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantListResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "GET_v1-auth-tenant",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/roles": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "GET_v1-auth-role",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "name": "x-tenant-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "x-tenant-id": {
                  "type": "string",
                  "example": "67a89fad069cd3c52f8cff22"
                }
              },
              "required": ["x-tenant-id"]
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/user": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Perform user registration. If the client passes a redirect URL and the SSO requires verification, the response of the verification call will be redirected to that URL.(Currently used in developer registeration)",
        "operationId": "POST_v1-auth-user",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "firstName",
                  "lastName",
                  "employeeId",
                  "primaryPhone",
                  "x-tenant-id",
                  "roleId"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "thillaimaharajan.g@gmail.com"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "thillai"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Maharajan"
                  },
                  "employeeId": {
                    "type": "string",
                    "example": "VS2891"
                  },
                  "primaryPhone": {
                    "type": "string",
                    "example": "9487316396"
                  },
                  "x-tenant-id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "67ba30c60af9a55d9831d4eb"
                  },
                  "roleId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "67ba30c60af9a55d9831d4d3"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/auth/change-password": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "description": "Change new password",
        "operationId": "PUT_v1_change_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "oldPassword": {
                    "type": "string"
                  }
                },
                "required": ["newPassword", "oldPassword"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": []
    },
    "/v1/auth/logout": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Clear the data from client and server side.",
        "operationId": "POST_v1-auth-logout",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": ["refreshToken"],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "description": "Get new accesstoken by using refreshtoken",
        "operationId": "POST_v1-auth-refresh",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": ["refreshToken"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/assessment/types": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Assessment"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "GET_v1-assessment-types",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/assessment/form": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Assessment"],
        "description": "Perform user registration. If the client passes a redirect URL and the SSO requires verification, the response of the verification call will be redirected to that URL.(Currently used in developer registeration)",
        "operationId": "POST_v1-assessment-form",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID (optional)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "formTypeId": {
                    "type": "string",
                    "description": "The ID of the form type"
                  },
                  "form": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for the question"
                        },
                        "questionCode": {
                          "type": "string",
                          "description": "The unique code of the question"
                        },
                        "questionType": {
                          "type": "string",
                          "description": "The type of the question (e.g., DROPDOWN, DATE, TEXT INPUT)"
                        },
                        "questionText": {
                          "type": "string",
                          "description": "The text of the question"
                        },
                        "description": {
                          "type": "string",
                          "description": "A brief description of the question"
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the question is required"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value/answer provided for the question",
                          "example": ""
                        }
                      }
                    },
                    "description": "A dynamic set of questions, identified by their questionCode"
                  }
                },
                "required": ["formTypeId", "form"]
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v1/setting/gridView": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Settings"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "POST_v1-settings-gridview",
        "parameters": [
          {
            "in": "header",
            "name": "content-type",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          }
        ],

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "tenantName": {
                        "type": "string"
                      }
                    },
                    "required": ["tenantName"]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Settings"],
        "description": "Perform federated user authentication. This returns an extended user model with added apiKey property to use for allother requests. Basically it is login api for web portal(dev). There are 2 ways to login. 1. Email Login 2. VIN login. For VIN login, Client will get the jwt from routing server and attach it in the header using which we are going to login the user",
        "operationId": "GET_v1-settings-gridview",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "schema": {
              "type": "string",
              "example": "Bearer token"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "x-tenant-id",
            "schema": {
              "type": "string",
              "example": "67a962c84aa8bc0e4063589e"
            },
            "required": false,
            "description": "Tenant ID of the customer"
          },
          {
            "name": "gridName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["clinicianTable", "clientTable", "assessmentTable"],
              "example": "clinicianTable"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "string",
            "example": "Needs to be developed"
          }
        }
      },
      "ChangePasswordResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Password updated."
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "example": "sandeepb@acutedge.com"
              },
              "userId": {
                "type": "string",
                "example": "67a95e6208705766eb2a4619"
              },
              "roles": {
                "type": "string",
                "example": "scribble_admin"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["sso.write"]
              },
              "accessToken": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2IjoyLCJ..."
              },
              "refreshToken": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoic..."
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-10T02:03:14.080Z"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-10T02:03:14.080Z"
              }
            }
          }
        }
      },

      "TenantResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "tenantName": {
                "type": "string",
                "example": "amedysis1"
              },
              "databaseName": {
                "type": "string",
                "example": "amedysis1"
              },
              "createdBy": {
                "type": "string",
                "format": "ObjectId",
                "example": "67a89f512d0f29cb9a87c940"
              },
              "_id": {
                "type": "string",
                "format": "ObjectId",
                "example": "67a89fad069cd3c52f8cff1f"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:29:33.215Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:29:33.215Z"
              },
              "__v": {
                "type": "integer",
                "example": 0
              }
            }
          }
        }
      },
      "TenantListResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67b4a43ef61eb03853b863fb"
          },
          "tenantName": {
            "type": "string",
            "example": "kantime"
          },
          "databaseName": {
            "type": "string",
            "example": "kantime"
          },
          "createdBy": {
            "type": "string",
            "example": "67b4a3fdf61eb03853b863f5"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T15:16:14.100Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T15:16:14.100Z"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "LoginRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "sandeepb@acutedge.com"
              },
              "password": {
                "type": "string",
                "example": "Admin@123"
              }
            },
            "required": ["username", "password"]
          }
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "UserResponseModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "roleId": {
                "type": "string",
                "example": "67a89fad069cd3c52f8cff22"
              },
              "tenantId": {
                "type": "string",
                "example": "67a89fad069cd3c52f8cff1f"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "thillaimaharajan.g@gmail.com"
              },
              "password": {
                "type": "string",
                "example": "$2b$10$8/mIZz4SPDAcPkRvrbopUOtZu87JS2dFhnByr4iW5f6fO9EszyV6e"
              },
              "isVerified": {
                "type": "string",
                "example": "false"
              },
              "isDeleted": {
                "type": "string",
                "example": "false"
              },
              "loginAttempts": {
                "type": "integer",
                "example": 0
              },
              "_id": {
                "type": "string",
                "example": "67a8a17fda90d3413efda928"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:37:19.762Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-02-09T12:37:19.763Z"
              },
              "__v": {
                "type": "integer",
                "example": 0
              }
            }
          }
        }
      },
      "RolesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67b4b17c9805bd2c1aedbc9e"
          },
          "roleName": {
            "type": "string",
            "example": "user"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "assessment.read",
              "assessment.write",
              "assessment.remove"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T16:12:44.330Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-18T16:12:44.331Z"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "errorCode": {
            "enum": [
              "GENERAL",
              "NOT_FOUND",
              "MISSING_DATA",
              "INVALID_DATA",
              "EXPIRED_TOKEN",
              "INVALID_TOKEN",
              "INVALID_CODE",
              "VERIFIED_ACCOUNT",
              "FEDERATED_ACCOUNT"
            ],
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["status", "errorMessage", "data"]
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "links": {},
    "callbacks": {}
  }
}
